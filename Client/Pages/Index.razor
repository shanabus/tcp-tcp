@page "/"
@using TCP_TCP.Shared.Model
@using Newtonsoft.Json
@inject NavigationManager Navigation
@inject DialogService DialogService
@using Microsoft.AspNetCore.SignalR.Client

<RadzenDialog />

<RadzenLayout>
    <RadzenBody>
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Gap="2rem" Class="rz-mb-4">
            <RadzenColumn Size="3" class="rz-color-info-dark rz-text-align-center rz-p-1">
                    Seats with humans: <b style="font-size: larger;">@Tables.SelectMany(x => x.Seats).Count(x => x.Active)</b>
            </RadzenColumn>
            <RadzenColumn Size="3" class="rz-color-info-dark rz-text-align-center rz-p-1">
                    Seats available: <b style="font-size: larger;">@Tables.SelectMany(x => x.Seats).Count(x => !x.Active)</b>
            </RadzenColumn>
            <RadzenColumn Size="3" class="rz-color-info-dark rz-text-align-center">                
                <RadzenButton Text="Reset Seats" Style="width: 70%;" Class="rz-py-2" ButtonStyle="ButtonStyle.Primary" Click=@ShowSimpleDialog />                
            </RadzenColumn>                    
        </RadzenRow>
        @{
            int tableXOffset = 70;
            int circleXStart = tableXOffset - 25;
            int circleYStart = 25;
        }           
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Gap="-1rem" Class="rz-pt-2 rz-pl-4">  
            @foreach (var table in Tables.Where(x => x.Row == 1))
            {   
                <TableFragment Table="@table" TableClickEvent="@TableClickAsync" SeatClickEvent="@SeatClickAsync" TableXOffset="@tableXOffset" SeatLongClickEvent="@SeatLongClickAsync" CircleXStart="@circleXStart" CircleYStart="@circleYStart"></TableFragment>
            }
        </RadzenRow>
        @{
            tableXOffset = 50;
            circleXStart = tableXOffset - 25;        
        }  
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Gap="-1rem" Class="rz-pt-1 rz-pl-4">  
            @foreach (var table in Tables.Where(x => x.Row == 2))
            {   
                <TableFragment Table="@table" TableClickEvent="@TableClickAsync" SeatClickEvent="@SeatClickAsync" TableXOffset="@tableXOffset" SeatLongClickEvent="@SeatLongClickAsync" CircleXStart="@circleXStart" CircleYStart="@circleYStart"></TableFragment>
            }
        </RadzenRow>
        @{
            tableXOffset = 50;
            circleXStart = tableXOffset - 25;        
        }  
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Normal" Gap="-9rem" Class="rz-pl-4">  
            @foreach (var table in Tables.Where(x => x.Row == 3))
            {   
                <TableFragment Table="@table" TableClickEvent="@TableClickAsync" SeatClickEvent="@SeatClickAsync" SeatLongClickEvent="@SeatLongClickAsync" TableXOffset="@tableXOffset" CircleXStart="@circleXStart" CircleYStart="@circleYStart"></TableFragment>
            }
        </RadzenRow>
    </RadzenBody>
</RadzenLayout>

<div id="components-reconnect-modal">
    There was a problem with the connection!
    (Current reconnect attempt: 
    <span id="components-reconnect-current-attempt"></span> /
    <span id="components-reconnect-max-retries"></span>)
</div>

@code {
    private HubConnection? hubConnection;

    List<Table> Tables { get; set; } = new List<Table>();

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        await BuildHubConnectionAsync();
    
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("GetTables");
        }
    }

    private async Task BuildHubConnectionAsync()
    {
        try
        {
            Console.WriteLine("Building Hub Connection");

            hubConnection = new HubConnectionBuilder()
                .WithAutomaticReconnect()
                .WithUrl(Navigation.ToAbsoluteUri("/tablehub"))
                .AddNewtonsoftJsonProtocol(opts => 
                    opts.PayloadSerializerSettings.TypeNameHandling = TypeNameHandling.Auto)    
                .Build();

            hubConnection.Reconnecting += (exception) =>
            {
                Console.WriteLine($"Connection started reconnecting due to an error: {exception}");
                return BusyDialog();
            };
            hubConnection.Reconnected += (connectionId) =>
            {
                Console.WriteLine($"Connection successfully reconnected. The ConnectionId is now: {connectionId}");
                Task.Run(async () => await hubConnection.SendAsync("GetTables"));
                DialogService.Close();
                return Task.CompletedTask;
            };

            hubConnection.On<List<Table>, string>("UpdateSeats", (tables, seatPosition) =>
            {            
                Tables = tables;
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<List<Table>>("TablesSet", (tables) => {
                Tables = tables;
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
        catch(Exception e)
        {
            Console.WriteLine("Could not build connection! " + e.Message);
        }        
    }

    public async Task SeatClickAsync(string seatPosition) 
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SeatedForShow", seatPosition);
        }    
    }

    public async Task SeatLongClickAsync(string seatPosition) 
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StayingForSecondShow", seatPosition);
        }
    }

    public async Task TableClickAsync(string tablePosition)
    {
        var table = Tables.First(x => x.Position == tablePosition);

        await DialogService.OpenSideAsync<NoteFormFragment>($"Notes for Table {tablePosition}",
                      parameters: new Dictionary<string, object> { { "Table", table }, { "HubConnection", hubConnection } },
                      options: new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Top, ShowMask = true }); 
    }

    public async Task UpdateTableNote(Table table)  
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateTableNote", table.Position, table.Note);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public async Task Reset(Boolean resetAll) {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ResetSeats", resetAll);
        }
        DialogService.Close();
    }

    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<div class="rz-color-info-dark rz-text-align-center rz-p-2">
                <div>
                    <div class="lds-ripple"><div></div><div></div></div>
                </div>
                <div>
                    <b>Reconnecting, please wait...</b>
                </div>
            </div>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:400px;width:auto", CloseDialogOnEsc = false });
    }


    async Task ShowSimpleDialog() => await DialogService.OpenAsync("Reset Seats?", ds =>
    @<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Gap="1rem" Class="rz-mb-4">
            <RadzenColumn Size="3" class="rz-color-info-dark rz-text-align-center rz-p-2">
                <RadzenButton Text="All Seats" Click="() => Reset(true)" ButtonStyle="ButtonStyle.Danger" />
            </RadzenColumn>
            <RadzenColumn Size="4" class="rz-color-info-dark rz-text-align-center rz-p-2">
                <RadzenButton Text="For Next Show" Click="() => Reset(false)" ButtonStyle="ButtonStyle.Warning" />
            </RadzenColumn>
            <RadzenColumn Size="3" class="rz-color-info-dark rz-text-align-center rz-p-2">
                <RadzenButton Text="No, Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenColumn>
    </RadzenRow>, new DialogOptions { Width = "900px"});
}