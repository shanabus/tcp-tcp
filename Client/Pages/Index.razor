@page "/"
@using TCP_TCP.Shared.Model
@using Newtonsoft.Json
@inject NavigationManager Navigation
@inject DialogService DialogService
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers

<RadzenDialog />

<RadzenLayout Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-right-sidebar'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenLabel Text="TCP : Table Coordination Program" Class="rz-mt-4 rz-mb-1 rz-mx-4" />
        </RadzenStack>
    </RadzenHeader>    
    <RadzenBody>
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Gap="2rem" Class="rz-mb-4">
            <RadzenColumn Size="3" class="rz-color-info-dark rz-text-align-center rz-p-2">
                <RadzenCard Class="">
                    Seats with humans: @Tables.SelectMany(x => x.Seats).Count(x => x.Active)
                </RadzenCard>
            </RadzenColumn>
            <RadzenColumn Size="3" class="rz-color-info-dark rz-text-align-center rz-p-2">
                <RadzenCard Class="">
                    Seats available: @Tables.SelectMany(x => x.Seats).Count(x => !x.Active)
                </RadzenCard>
            </RadzenColumn>
            <RadzenColumn Size="3" class="rz-color-info-dark rz-text-align-center rz-p-2">                
                <RadzenButton Text="Reset Seats" Style="width: 100%;" Class="rz-py-4" ButtonStyle="ButtonStyle.Primary" Click=@ConfirmSeatReset />                
            </RadzenColumn>
            <RadzenColumn Size="1" class="rz-color-info-dark rz-text-align-center rz-p-2">                
                <RadzenButton Class="rz-py-4" ButtonStyle="ButtonStyle.Secondary" Click=@GetStatisticalDataClick>                
                    <RadzenIcon Icon="grade" />
                </RadzenButton>
            </RadzenColumn>
            
                        
        </RadzenRow>
        @{
            int tableXOffset = 70;
            int circleXStart = tableXOffset - 25;
            int circleYStart = 25;
        }           
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Gap="-1rem">  
            @foreach (var table in Tables.Where(x => x.Row == 1))
            {   
                <TableFragment Table="@table" HotSeats="@HotSeats" SeatClickEvent="@SeatClickAsync" TableXOffset="@tableXOffset" SeatLongClickEvent="@SeatLongClickAsync" CircleXStart="@circleXStart" CircleYStart="@circleYStart"></TableFragment>
            }
        </RadzenRow>
        @{
            tableXOffset = 50;
            circleXStart = tableXOffset - 25;        
        }  
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Gap="-1rem">  
            @foreach (var table in Tables.Where(x => x.Row == 2))
            {   
                <TableFragment Table="@table" HotSeats="@HotSeats" SeatClickEvent="@SeatClickAsync" TableXOffset="@tableXOffset" SeatLongClickEvent="@SeatLongClickAsync" CircleXStart="@circleXStart" CircleYStart="@circleYStart"></TableFragment>
            }
        </RadzenRow>
        @{
            tableXOffset = 50;
            circleXStart = tableXOffset - 25;        
        }  
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Normal" Gap="-9rem">  
            @foreach (var table in Tables.Where(x => x.Row == 3))
            {   
                <TableFragment Table="@table" HotSeats="@HotSeats" SeatClickEvent="@SeatClickAsync" SeatLongClickEvent="@SeatLongClickAsync" TableXOffset="@tableXOffset" CircleXStart="@circleXStart" CircleYStart="@circleYStart"></TableFragment>
            }
        </RadzenRow>
    </RadzenBody>
</RadzenLayout>

@code {
    private HubConnection? hubConnection;

    List<Table> Tables { get; set; } = new List<Table>();

    Dictionary<string, int> HotSeats { get; set; } = new Dictionary<string, int>();

    private Timer timerObj;

    protected override async Task OnInitializedAsync()
    {
        timerObj = new Timer(5000);
        timerObj.Elapsed += OnUserFinish;
        timerObj.AutoReset = false;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tablehub"))
            .AddNewtonsoftJsonProtocol(opts => 
                opts.PayloadSerializerSettings.TypeNameHandling = TypeNameHandling.Auto)    
            .Build();

        hubConnection.On<List<Table>, string>("UpdateSeats", (tables, seatPosition) =>
        {            
            Tables = tables;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<Table>>("TablesSet", (tables) => {
            Tables = tables;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Dictionary<string, int>>("TableStatistics", (data) => {            
            HotSeats = data;
            timerObj.Start();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("GetTables");
        }
    }

    private void OnUserFinish(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            HotSeats = new Dictionary<string, int>();
            StateHasChanged();
        });
    }
        public async Task GetStatisticalDataClick()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("GetTableStatisticData");
        }
    }

    public async Task SeatClickAsync(string seatPosition) 
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SeatedForShow", seatPosition);
        }
    }

    public async Task SeatLongClickAsync(string seatPosition) 
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StayingForSecondShow", seatPosition);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public async Task ConfirmSeatReset() {
        var result = await DialogService.Confirm("Are you sure?", "Reset Seats", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }); 

        if (result.HasValue && result == true && hubConnection is not null)
        {
            await hubConnection.SendAsync("ResetSeats");
        }
    }
}