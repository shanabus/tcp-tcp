@inherits LayoutComponentBase
@using TCP_TCP.Shared.Model

<RadzenColumn Size="2" class="rz-color-info-dark rz-text-align-center">                 
    @if(Table.Seats.Count == 3) 
    {
        <svg version="1.1" height="220" width="200" id="table-@Table.Position" class="round-table-wrapper">
            <g>
                <circle cx="85" cy="40" r="35" fill="@TableFillColor()" stroke="@TableStroke" />
                <g>
                    <text x="75" y="45">@Table.Position</text>
                </g>

                @{
                    int circleXOffset = CircleXStart;
                    int xSideOffset = CircleXStart + 100;
                    int circleYOffset = 40;
                }
                
                @foreach (var seat in Table.Seats)
                {   
                    <circle cx="@circleXOffset" cy="@circleYOffset" r="20" class="seat" stroke="@SeatStroke(seat)" fill='@SeatFill(seat)' @ontouchstart='() => PointerDown("touch")' @ontouchend='() => PointerUp("touch", seat.Position)' @onpointerdown='() => PointerDown("pointer")' @onpointerup='() => PointerUp("pointer", seat.Position)' />
                    circleXOffset = (circleXOffset == CircleXStart)? CircleXStart + 120 : circleXOffset - 60;
                    circleYOffset = (circleXOffset == CircleXStart || circleXOffset == CircleXStart + 120)? circleYOffset: circleYOffset + 60 ;
                }
            </g>
        </svg>
    }         
    else if (Table.Seats.Count == 6) 
    {
        <svg version="1.1" height="200" width="280" id="table-@Table.Position">
            <g>
                <rect width="270" height="50" fill="@TableFillColor()" stroke="black" x="0" y="0"></rect>
                <g>
                    <text x="125" y="30">@Table.Position</text>
                </g>

                @{
                    int circleXOffset = CircleXStart;
                    int circleYOffset = 75;
                }
                
                @foreach (var seat in Table.Seats)
                {           
                    <circle cx="@circleXOffset" cy="@circleYOffset" r="20"  class="circle-seat" stroke="@SeatStroke(seat)" fill='@SeatFill(seat)' @ontouchstart='() => PointerDown("touch")' @ontouchend='() => PointerUp("touch", seat.Position)' @onpointerdown='() => PointerDown("pointer")' @onpointerup='() => PointerUp("pointer", seat.Position)' />
                    circleXOffset += 45;
                }     
            </g>
        </svg>
    }
    else 
    {
        <svg version="1.1" height="220" width="200" id="table-@Table.Position">
            <g>
                <rect width="50" height="185" fill='@TableFillColor()' stroke="@TableStroke" x="@TableXOffset" y="0"></rect>
                <g>
                    <text x="70" y="100">@Table.Position</text> 
                </g>
                
                @{
                    int circleXOffset = CircleXStart;
                    int circleYOffset = CircleYStart;
                    int xSideOffset = CircleXStart + 100;
                }
                
                @foreach (var seat in Table.Seats)
                {           
                    <circle cx="@circleXOffset" cy="@circleYOffset" r="20" class="circle-seat" stroke="@SeatStroke(seat)" fill='@SeatFill(seat)' @ontouchstart='() => PointerDown("touch")' @ontouchend='() => PointerUp("touch", seat.Position)' @onpointerdown='() => PointerDown("pointer")' @onpointerup='() => PointerUp("pointer", seat.Position)' />
                    
                    circleXOffset = circleXOffset == xSideOffset ? CircleXStart : xSideOffset;
                    circleYOffset = circleXOffset == xSideOffset ? circleYOffset : circleYOffset + 45;
                }    
            </g>
        </svg>
    }
</RadzenColumn>

@code {

    [Parameter]
    public int TableXOffset { get; set; }
    
    [Parameter]
    public int CircleXStart { get; set; }

    [Parameter]
    public int CircleYStart { get; set; }

    [Parameter]
    public Table Table { get; set; } = default!;

    [Parameter]
    public EventCallback<string> SeatClickEvent { get; set; } = default!;       
    
    [Parameter]
    public EventCallback<string> SeatLongClickEvent { get; set; } = default!;       

    private DateTime PointerDownTime;

    private string TableFill = "lightgrey";
    private string TableStroke = "black";
    private string SeatStrokeDefault = "black";

    private string EventSource = "";

    public string TableFillColor() => Table.Seats.All(x => x.Active || x.SecondShow)? "green" : TableFill;

    public void PointerDown(string source)
    {
        EventSource = EventSource == ""? source : EventSource;
        PointerDownTime = DateTime.UtcNow;
    }

    public async Task PointerUp(string source, string seatPosition)
    {
        if (source == EventSource){
            var downTime = (DateTime.UtcNow.Ticks - PointerDownTime.Ticks) / TimeSpan.TicksPerMillisecond;
            if (downTime > 400)
            {
                await SeatLongClickEvent.InvokeAsync(seatPosition);
            } else {
                await SeatClickEvent.InvokeAsync(seatPosition);
            }
            EventSource = "";
        }        
    }

    public string SeatFill(Seat seat)
    {
        string seatFill = seat.Active ? "green" : "white";                    
        seatFill = seat.SecondShow ? "gold" : seatFill;

        return seatFill;
    }

    public string SeatStroke(Seat seat)
    {
        string seatStroke = SeatStrokeDefault;  

        return seatStroke;
    }
}